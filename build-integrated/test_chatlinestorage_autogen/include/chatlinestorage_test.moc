/****************************************************************************
** Meta object code from reading C++ file 'chatlinestorage_test.cpp'
**
** Created by: The Qt Meta Object Compiler version 68 (Qt 6.4.2)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <memory>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'chatlinestorage_test.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 68
#error "This file was generated using the moc from 6.4.2. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
namespace {
struct qt_meta_stringdata_TestChatLineStorage_t {
    uint offsetsAndSizes[38];
    char stringdata0[20];
    char stringdata1[5];
    char stringdata2[1];
    char stringdata3[21];
    char stringdata4[16];
    char stringdata5[24];
    char stringdata6[19];
    char stringdata7[20];
    char stringdata8[20];
    char stringdata9[17];
    char stringdata10[14];
    char stringdata11[21];
    char stringdata12[20];
    char stringdata13[25];
    char stringdata14[23];
    char stringdata15[22];
    char stringdata16[16];
    char stringdata17[28];
    char stringdata18[31];
};
#define QT_MOC_LITERAL(ofs, len) \
    uint(sizeof(qt_meta_stringdata_TestChatLineStorage_t::offsetsAndSizes) + ofs), len 
Q_CONSTINIT static const qt_meta_stringdata_TestChatLineStorage_t qt_meta_stringdata_TestChatLineStorage = {
    {
        QT_MOC_LITERAL(0, 19),  // "TestChatLineStorage"
        QT_MOC_LITERAL(20, 4),  // "init"
        QT_MOC_LITERAL(25, 0),  // ""
        QT_MOC_LITERAL(26, 20),  // "testChatLogIdxAccess"
        QT_MOC_LITERAL(47, 15),  // "testIndexAccess"
        QT_MOC_LITERAL(63, 23),  // "testRangeBasedIteration"
        QT_MOC_LITERAL(87, 18),  // "testAppendingItems"
        QT_MOC_LITERAL(106, 19),  // "testPrependingItems"
        QT_MOC_LITERAL(126, 19),  // "testMiddleInsertion"
        QT_MOC_LITERAL(146, 16),  // "testIndexRemoval"
        QT_MOC_LITERAL(163, 13),  // "testItRemoval"
        QT_MOC_LITERAL(177, 20),  // "testDateLineAddition"
        QT_MOC_LITERAL(198, 19),  // "testDateLineRemoval"
        QT_MOC_LITERAL(218, 24),  // "testInsertionBeforeDates"
        QT_MOC_LITERAL(243, 22),  // "testInsertionAfterDate"
        QT_MOC_LITERAL(266, 21),  // "testContainsTimestamp"
        QT_MOC_LITERAL(288, 15),  // "testContainsIdx"
        QT_MOC_LITERAL(304, 27),  // "testEndOfStorageDateRemoval"
        QT_MOC_LITERAL(332, 30)   // "testConsecutiveDateLineRemoval"
    },
    "TestChatLineStorage",
    "init",
    "",
    "testChatLogIdxAccess",
    "testIndexAccess",
    "testRangeBasedIteration",
    "testAppendingItems",
    "testPrependingItems",
    "testMiddleInsertion",
    "testIndexRemoval",
    "testItRemoval",
    "testDateLineAddition",
    "testDateLineRemoval",
    "testInsertionBeforeDates",
    "testInsertionAfterDate",
    "testContainsTimestamp",
    "testContainsIdx",
    "testEndOfStorageDateRemoval",
    "testConsecutiveDateLineRemoval"
};
#undef QT_MOC_LITERAL
} // unnamed namespace

Q_CONSTINIT static const uint qt_meta_data_TestChatLineStorage[] = {

 // content:
      10,       // revision
       0,       // classname
       0,    0, // classinfo
      17,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags, initial metatype offsets
       1,    0,  116,    2, 0x08,    1 /* Private */,
       3,    0,  117,    2, 0x08,    2 /* Private */,
       4,    0,  118,    2, 0x08,    3 /* Private */,
       5,    0,  119,    2, 0x08,    4 /* Private */,
       6,    0,  120,    2, 0x08,    5 /* Private */,
       7,    0,  121,    2, 0x08,    6 /* Private */,
       8,    0,  122,    2, 0x08,    7 /* Private */,
       9,    0,  123,    2, 0x08,    8 /* Private */,
      10,    0,  124,    2, 0x08,    9 /* Private */,
      11,    0,  125,    2, 0x08,   10 /* Private */,
      12,    0,  126,    2, 0x08,   11 /* Private */,
      13,    0,  127,    2, 0x08,   12 /* Private */,
      14,    0,  128,    2, 0x08,   13 /* Private */,
      15,    0,  129,    2, 0x08,   14 /* Private */,
      16,    0,  130,    2, 0x08,   15 /* Private */,
      17,    0,  131,    2, 0x08,   16 /* Private */,
      18,    0,  132,    2, 0x08,   17 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

Q_CONSTINIT const QMetaObject TestChatLineStorage::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_meta_stringdata_TestChatLineStorage.offsetsAndSizes,
    qt_meta_data_TestChatLineStorage,
    qt_static_metacall,
    nullptr,
    qt_incomplete_metaTypeArray<qt_meta_stringdata_TestChatLineStorage_t,
        // Q_OBJECT / Q_GADGET
        QtPrivate::TypeAndForceComplete<TestChatLineStorage, std::true_type>,
        // method 'init'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testChatLogIdxAccess'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testIndexAccess'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testRangeBasedIteration'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testAppendingItems'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testPrependingItems'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testMiddleInsertion'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testIndexRemoval'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testItRemoval'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testDateLineAddition'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testDateLineRemoval'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testInsertionBeforeDates'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testInsertionAfterDate'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testContainsTimestamp'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testContainsIdx'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testEndOfStorageDateRemoval'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testConsecutiveDateLineRemoval'
        QtPrivate::TypeAndForceComplete<void, std::false_type>
    >,
    nullptr
} };

void TestChatLineStorage::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<TestChatLineStorage *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->init(); break;
        case 1: _t->testChatLogIdxAccess(); break;
        case 2: _t->testIndexAccess(); break;
        case 3: _t->testRangeBasedIteration(); break;
        case 4: _t->testAppendingItems(); break;
        case 5: _t->testPrependingItems(); break;
        case 6: _t->testMiddleInsertion(); break;
        case 7: _t->testIndexRemoval(); break;
        case 8: _t->testItRemoval(); break;
        case 9: _t->testDateLineAddition(); break;
        case 10: _t->testDateLineRemoval(); break;
        case 11: _t->testInsertionBeforeDates(); break;
        case 12: _t->testInsertionAfterDate(); break;
        case 13: _t->testContainsTimestamp(); break;
        case 14: _t->testContainsIdx(); break;
        case 15: _t->testEndOfStorageDateRemoval(); break;
        case 16: _t->testConsecutiveDateLineRemoval(); break;
        default: ;
        }
    }
    (void)_a;
}

const QMetaObject *TestChatLineStorage::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestChatLineStorage::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_TestChatLineStorage.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestChatLineStorage::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 17)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 17;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 17)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 17;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE

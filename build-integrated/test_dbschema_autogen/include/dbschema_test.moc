/****************************************************************************
** Meta object code from reading C++ file 'dbschema_test.cpp'
**
** Created by: The Qt Meta Object Compiler version 68 (Qt 6.4.2)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <memory>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'dbschema_test.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 68
#error "This file was generated using the moc from 6.4.2. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
namespace {
struct qt_meta_stringdata_TestDbSchema_t {
    uint offsetsAndSizes[30];
    char stringdata0[13];
    char stringdata1[5];
    char stringdata2[1];
    char stringdata3[8];
    char stringdata4[13];
    char stringdata5[12];
    char stringdata6[12];
    char stringdata7[9];
    char stringdata8[9];
    char stringdata9[9];
    char stringdata10[9];
    char stringdata11[9];
    char stringdata12[9];
    char stringdata13[9];
    char stringdata14[10];
};
#define QT_MOC_LITERAL(ofs, len) \
    uint(sizeof(qt_meta_stringdata_TestDbSchema_t::offsetsAndSizes) + ofs), len 
Q_CONSTINIT static const qt_meta_stringdata_TestDbSchema_t qt_meta_stringdata_TestDbSchema = {
    {
        QT_MOC_LITERAL(0, 12),  // "TestDbSchema"
        QT_MOC_LITERAL(13, 4),  // "init"
        QT_MOC_LITERAL(18, 0),  // ""
        QT_MOC_LITERAL(19, 7),  // "cleanup"
        QT_MOC_LITERAL(27, 12),  // "testCreation"
        QT_MOC_LITERAL(40, 11),  // "testIsNewDb"
        QT_MOC_LITERAL(52, 11),  // "testNewerDb"
        QT_MOC_LITERAL(64, 8),  // "test0to1"
        QT_MOC_LITERAL(73, 8),  // "test1to2"
        QT_MOC_LITERAL(82, 8),  // "test2to3"
        QT_MOC_LITERAL(91, 8),  // "test3to4"
        QT_MOC_LITERAL(100, 8),  // "test4to5"
        QT_MOC_LITERAL(109, 8),  // "test5to6"
        QT_MOC_LITERAL(118, 8),  // "test6to7"
        QT_MOC_LITERAL(127, 9)   // "test9to10"
    },
    "TestDbSchema",
    "init",
    "",
    "cleanup",
    "testCreation",
    "testIsNewDb",
    "testNewerDb",
    "test0to1",
    "test1to2",
    "test2to3",
    "test3to4",
    "test4to5",
    "test5to6",
    "test6to7",
    "test9to10"
};
#undef QT_MOC_LITERAL
} // unnamed namespace

Q_CONSTINIT static const uint qt_meta_data_TestDbSchema[] = {

 // content:
      10,       // revision
       0,       // classname
       0,    0, // classinfo
      13,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags, initial metatype offsets
       1,    0,   92,    2, 0x08,    1 /* Private */,
       3,    0,   93,    2, 0x08,    2 /* Private */,
       4,    0,   94,    2, 0x08,    3 /* Private */,
       5,    0,   95,    2, 0x08,    4 /* Private */,
       6,    0,   96,    2, 0x08,    5 /* Private */,
       7,    0,   97,    2, 0x08,    6 /* Private */,
       8,    0,   98,    2, 0x08,    7 /* Private */,
       9,    0,   99,    2, 0x08,    8 /* Private */,
      10,    0,  100,    2, 0x08,    9 /* Private */,
      11,    0,  101,    2, 0x08,   10 /* Private */,
      12,    0,  102,    2, 0x08,   11 /* Private */,
      13,    0,  103,    2, 0x08,   12 /* Private */,
      14,    0,  104,    2, 0x08,   13 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

Q_CONSTINIT const QMetaObject TestDbSchema::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_meta_stringdata_TestDbSchema.offsetsAndSizes,
    qt_meta_data_TestDbSchema,
    qt_static_metacall,
    nullptr,
    qt_incomplete_metaTypeArray<qt_meta_stringdata_TestDbSchema_t,
        // Q_OBJECT / Q_GADGET
        QtPrivate::TypeAndForceComplete<TestDbSchema, std::true_type>,
        // method 'init'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'cleanup'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testCreation'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testIsNewDb'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testNewerDb'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'test0to1'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'test1to2'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'test2to3'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'test3to4'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'test4to5'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'test5to6'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'test6to7'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'test9to10'
        QtPrivate::TypeAndForceComplete<void, std::false_type>
    >,
    nullptr
} };

void TestDbSchema::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<TestDbSchema *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->init(); break;
        case 1: _t->cleanup(); break;
        case 2: _t->testCreation(); break;
        case 3: _t->testIsNewDb(); break;
        case 4: _t->testNewerDb(); break;
        case 5: _t->test0to1(); break;
        case 6: _t->test1to2(); break;
        case 7: _t->test2to3(); break;
        case 8: _t->test3to4(); break;
        case 9: _t->test4to5(); break;
        case 10: _t->test5to6(); break;
        case 11: _t->test6to7(); break;
        case 12: _t->test9to10(); break;
        default: ;
        }
    }
    (void)_a;
}

const QMetaObject *TestDbSchema::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestDbSchema::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_TestDbSchema.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestDbSchema::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 13)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 13;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 13)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 13;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE

/****************************************************************************
** Meta object code from reading C++ file 'exiftransform_test.cpp'
**
** Created by: The Qt Meta Object Compiler version 68 (Qt 6.4.2)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <memory>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'exiftransform_test.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 68
#error "This file was generated using the moc from 6.4.2. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
namespace {
struct qt_meta_stringdata_TestExifTransform_t {
    uint offsetsAndSizes[24];
    char stringdata0[18];
    char stringdata1[5];
    char stringdata2[1];
    char stringdata3[12];
    char stringdata4[13];
    char stringdata5[16];
    char stringdata6[15];
    char stringdata7[12];
    char stringdata8[13];
    char stringdata9[16];
    char stringdata10[15];
    char stringdata11[18];
};
#define QT_MOC_LITERAL(ofs, len) \
    uint(sizeof(qt_meta_stringdata_TestExifTransform_t::offsetsAndSizes) + ofs), len 
Q_CONSTINIT static const qt_meta_stringdata_TestExifTransform_t qt_meta_stringdata_TestExifTransform = {
    {
        QT_MOC_LITERAL(0, 17),  // "TestExifTransform"
        QT_MOC_LITERAL(18, 4),  // "init"
        QT_MOC_LITERAL(23, 0),  // ""
        QT_MOC_LITERAL(24, 11),  // "testTopLeft"
        QT_MOC_LITERAL(36, 12),  // "testTopRight"
        QT_MOC_LITERAL(49, 15),  // "testBottomRight"
        QT_MOC_LITERAL(65, 14),  // "testBottomLeft"
        QT_MOC_LITERAL(80, 11),  // "testLeftTop"
        QT_MOC_LITERAL(92, 12),  // "testRightTop"
        QT_MOC_LITERAL(105, 15),  // "testRightBottom"
        QT_MOC_LITERAL(121, 14),  // "testLeftBottom"
        QT_MOC_LITERAL(136, 17)   // "testInputTooShort"
    },
    "TestExifTransform",
    "init",
    "",
    "testTopLeft",
    "testTopRight",
    "testBottomRight",
    "testBottomLeft",
    "testLeftTop",
    "testRightTop",
    "testRightBottom",
    "testLeftBottom",
    "testInputTooShort"
};
#undef QT_MOC_LITERAL
} // unnamed namespace

Q_CONSTINIT static const uint qt_meta_data_TestExifTransform[] = {

 // content:
      10,       // revision
       0,       // classname
       0,    0, // classinfo
      10,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags, initial metatype offsets
       1,    0,   74,    2, 0x08,    1 /* Private */,
       3,    0,   75,    2, 0x08,    2 /* Private */,
       4,    0,   76,    2, 0x08,    3 /* Private */,
       5,    0,   77,    2, 0x08,    4 /* Private */,
       6,    0,   78,    2, 0x08,    5 /* Private */,
       7,    0,   79,    2, 0x08,    6 /* Private */,
       8,    0,   80,    2, 0x08,    7 /* Private */,
       9,    0,   81,    2, 0x08,    8 /* Private */,
      10,    0,   82,    2, 0x08,    9 /* Private */,
      11,    0,   83,    2, 0x08,   10 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

Q_CONSTINIT const QMetaObject TestExifTransform::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_meta_stringdata_TestExifTransform.offsetsAndSizes,
    qt_meta_data_TestExifTransform,
    qt_static_metacall,
    nullptr,
    qt_incomplete_metaTypeArray<qt_meta_stringdata_TestExifTransform_t,
        // Q_OBJECT / Q_GADGET
        QtPrivate::TypeAndForceComplete<TestExifTransform, std::true_type>,
        // method 'init'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testTopLeft'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testTopRight'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testBottomRight'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testBottomLeft'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testLeftTop'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testRightTop'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testRightBottom'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testLeftBottom'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testInputTooShort'
        QtPrivate::TypeAndForceComplete<void, std::false_type>
    >,
    nullptr
} };

void TestExifTransform::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<TestExifTransform *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->init(); break;
        case 1: _t->testTopLeft(); break;
        case 2: _t->testTopRight(); break;
        case 3: _t->testBottomRight(); break;
        case 4: _t->testBottomLeft(); break;
        case 5: _t->testLeftTop(); break;
        case 6: _t->testRightTop(); break;
        case 7: _t->testRightBottom(); break;
        case 8: _t->testLeftBottom(); break;
        case 9: _t->testInputTooShort(); break;
        default: ;
        }
    }
    (void)_a;
}

const QMetaObject *TestExifTransform::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestExifTransform::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_TestExifTransform.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestExifTransform::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 10)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 10;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 10)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 10;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE

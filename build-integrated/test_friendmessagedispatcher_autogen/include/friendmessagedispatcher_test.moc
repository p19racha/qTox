/****************************************************************************
** Meta object code from reading C++ file 'friendmessagedispatcher_test.cpp'
**
** Created by: The Qt Meta Object Compiler version 68 (Qt 6.4.2)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <memory>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'friendmessagedispatcher_test.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 68
#error "This file was generated using the moc from 6.4.2. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
namespace {
struct qt_meta_stringdata_TestFriendMessageDispatcher_t {
    uint offsetsAndSizes[38];
    char stringdata0[28];
    char stringdata1[5];
    char stringdata2[1];
    char stringdata3[12];
    char stringdata4[19];
    char stringdata5[20];
    char stringdata6[18];
    char stringdata7[14];
    char stringdata8[20];
    char stringdata9[3];
    char stringdata10[8];
    char stringdata11[8];
    char stringdata12[18];
    char stringdata13[18];
    char stringdata14[6];
    char stringdata15[7];
    char stringdata16[16];
    char stringdata17[20];
    char stringdata18[7];
};
#define QT_MOC_LITERAL(ofs, len) \
    uint(sizeof(qt_meta_stringdata_TestFriendMessageDispatcher_t::offsetsAndSizes) + ofs), len 
Q_CONSTINIT static const qt_meta_stringdata_TestFriendMessageDispatcher_t qt_meta_stringdata_TestFriendMessageDispatcher = {
    {
        QT_MOC_LITERAL(0, 27),  // "TestFriendMessageDispatcher"
        QT_MOC_LITERAL(28, 4),  // "init"
        QT_MOC_LITERAL(33, 0),  // ""
        QT_MOC_LITERAL(34, 11),  // "testSignals"
        QT_MOC_LITERAL(46, 18),  // "testMessageSending"
        QT_MOC_LITERAL(65, 19),  // "testOfflineMessages"
        QT_MOC_LITERAL(85, 17),  // "testFailedMessage"
        QT_MOC_LITERAL(103, 13),  // "onMessageSent"
        QT_MOC_LITERAL(117, 19),  // "DispatchedMessageId"
        QT_MOC_LITERAL(137, 2),  // "id"
        QT_MOC_LITERAL(140, 7),  // "Message"
        QT_MOC_LITERAL(148, 7),  // "message"
        QT_MOC_LITERAL(156, 17),  // "onMessageComplete"
        QT_MOC_LITERAL(174, 17),  // "onMessageReceived"
        QT_MOC_LITERAL(192, 5),  // "ToxPk"
        QT_MOC_LITERAL(198, 6),  // "sender"
        QT_MOC_LITERAL(205, 15),  // "onMessageBroken"
        QT_MOC_LITERAL(221, 19),  // "BrokenMessageReason"
        QT_MOC_LITERAL(241, 6)   // "reason"
    },
    "TestFriendMessageDispatcher",
    "init",
    "",
    "testSignals",
    "testMessageSending",
    "testOfflineMessages",
    "testFailedMessage",
    "onMessageSent",
    "DispatchedMessageId",
    "id",
    "Message",
    "message",
    "onMessageComplete",
    "onMessageReceived",
    "ToxPk",
    "sender",
    "onMessageBroken",
    "BrokenMessageReason",
    "reason"
};
#undef QT_MOC_LITERAL
} // unnamed namespace

Q_CONSTINIT static const uint qt_meta_data_TestFriendMessageDispatcher[] = {

 // content:
      10,       // revision
       0,       // classname
       0,    0, // classinfo
       9,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags, initial metatype offsets
       1,    0,   68,    2, 0x08,    1 /* Private */,
       3,    0,   69,    2, 0x08,    2 /* Private */,
       4,    0,   70,    2, 0x08,    3 /* Private */,
       5,    0,   71,    2, 0x08,    4 /* Private */,
       6,    0,   72,    2, 0x08,    5 /* Private */,
       7,    2,   73,    2, 0x08,    6 /* Private */,
      12,    1,   78,    2, 0x08,    9 /* Private */,
      13,    2,   81,    2, 0x08,   11 /* Private */,
      16,    2,   86,    2, 0x08,   14 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void, 0x80000000 | 8, 0x80000000 | 10,    9,   11,
    QMetaType::Void, 0x80000000 | 8,    9,
    QMetaType::Void, 0x80000000 | 14, 0x80000000 | 10,   15,   11,
    QMetaType::Void, 0x80000000 | 8, 0x80000000 | 17,    9,   18,

       0        // eod
};

Q_CONSTINIT const QMetaObject TestFriendMessageDispatcher::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_meta_stringdata_TestFriendMessageDispatcher.offsetsAndSizes,
    qt_meta_data_TestFriendMessageDispatcher,
    qt_static_metacall,
    nullptr,
    qt_incomplete_metaTypeArray<qt_meta_stringdata_TestFriendMessageDispatcher_t,
        // Q_OBJECT / Q_GADGET
        QtPrivate::TypeAndForceComplete<TestFriendMessageDispatcher, std::true_type>,
        // method 'init'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testSignals'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testMessageSending'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testOfflineMessages'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testFailedMessage'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'onMessageSent'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<DispatchedMessageId, std::false_type>,
        QtPrivate::TypeAndForceComplete<Message, std::false_type>,
        // method 'onMessageComplete'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<DispatchedMessageId, std::false_type>,
        // method 'onMessageReceived'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<const ToxPk &, std::false_type>,
        QtPrivate::TypeAndForceComplete<Message, std::false_type>,
        // method 'onMessageBroken'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<DispatchedMessageId, std::false_type>,
        QtPrivate::TypeAndForceComplete<BrokenMessageReason, std::false_type>
    >,
    nullptr
} };

void TestFriendMessageDispatcher::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<TestFriendMessageDispatcher *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->init(); break;
        case 1: _t->testSignals(); break;
        case 2: _t->testMessageSending(); break;
        case 3: _t->testOfflineMessages(); break;
        case 4: _t->testFailedMessage(); break;
        case 5: _t->onMessageSent((*reinterpret_cast< std::add_pointer_t<DispatchedMessageId>>(_a[1])),(*reinterpret_cast< std::add_pointer_t<Message>>(_a[2]))); break;
        case 6: _t->onMessageComplete((*reinterpret_cast< std::add_pointer_t<DispatchedMessageId>>(_a[1]))); break;
        case 7: _t->onMessageReceived((*reinterpret_cast< std::add_pointer_t<ToxPk>>(_a[1])),(*reinterpret_cast< std::add_pointer_t<Message>>(_a[2]))); break;
        case 8: _t->onMessageBroken((*reinterpret_cast< std::add_pointer_t<DispatchedMessageId>>(_a[1])),(*reinterpret_cast< std::add_pointer_t<BrokenMessageReason>>(_a[2]))); break;
        default: ;
        }
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        switch (_id) {
        default: *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType(); break;
        case 5:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType(); break;
            case 0:
                *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType::fromType< DispatchedMessageId >(); break;
            }
            break;
        case 6:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType(); break;
            case 0:
                *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType::fromType< DispatchedMessageId >(); break;
            }
            break;
        case 8:
            switch (*reinterpret_cast<int*>(_a[1])) {
            default: *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType(); break;
            case 0:
                *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType::fromType< DispatchedMessageId >(); break;
            }
            break;
        }
    }
}

const QMetaObject *TestFriendMessageDispatcher::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestFriendMessageDispatcher::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_TestFriendMessageDispatcher.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestFriendMessageDispatcher::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 9)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 9;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 9)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 9;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE

/****************************************************************************
** Meta object code from reading C++ file 'notificationgenerator_test.cpp'
**
** Created by: The Qt Meta Object Compiler version 68 (Qt 6.4.2)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <memory>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'notificationgenerator_test.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 68
#error "This file was generated using the moc from 6.4.2. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
namespace {
struct qt_meta_stringdata_TestNotificationGenerator_t {
    uint offsetsAndSizes[46];
    char stringdata0[26];
    char stringdata1[5];
    char stringdata2[1];
    char stringdata3[24];
    char stringdata4[27];
    char stringdata5[22];
    char stringdata6[22];
    char stringdata7[31];
    char stringdata8[33];
    char stringdata9[37];
    char stringdata10[24];
    char stringdata11[17];
    char stringdata12[29];
    char stringdata13[25];
    char stringdata14[30];
    char stringdata15[18];
    char stringdata16[27];
    char stringdata17[24];
    char stringdata18[23];
    char stringdata19[28];
    char stringdata20[24];
    char stringdata21[27];
    char stringdata22[24];
};
#define QT_MOC_LITERAL(ofs, len) \
    uint(sizeof(qt_meta_stringdata_TestNotificationGenerator_t::offsetsAndSizes) + ofs), len 
Q_CONSTINIT static const qt_meta_stringdata_TestNotificationGenerator_t qt_meta_stringdata_TestNotificationGenerator = {
    {
        QT_MOC_LITERAL(0, 25),  // "TestNotificationGenerator"
        QT_MOC_LITERAL(26, 4),  // "init"
        QT_MOC_LITERAL(31, 0),  // ""
        QT_MOC_LITERAL(32, 23),  // "testSingleFriendMessage"
        QT_MOC_LITERAL(56, 26),  // "testMultipleFriendMessages"
        QT_MOC_LITERAL(83, 21),  // "testNotificationClear"
        QT_MOC_LITERAL(105, 21),  // "testConferenceMessage"
        QT_MOC_LITERAL(127, 30),  // "testMultipleConferenceMessages"
        QT_MOC_LITERAL(158, 32),  // "testMultipleFriendSourceMessages"
        QT_MOC_LITERAL(191, 36),  // "testMultipleConferenceSourceM..."
        QT_MOC_LITERAL(228, 23),  // "testMixedSourceMessages"
        QT_MOC_LITERAL(252, 16),  // "testFileTransfer"
        QT_MOC_LITERAL(269, 28),  // "testFileTransferAfterMessage"
        QT_MOC_LITERAL(298, 24),  // "testConferenceInvitation"
        QT_MOC_LITERAL(323, 29),  // "testConferenceInviteUncounted"
        QT_MOC_LITERAL(353, 17),  // "testFriendRequest"
        QT_MOC_LITERAL(371, 26),  // "testFriendRequestUncounted"
        QT_MOC_LITERAL(398, 23),  // "testSimpleFriendMessage"
        QT_MOC_LITERAL(422, 22),  // "testSimpleFileTransfer"
        QT_MOC_LITERAL(445, 27),  // "testSimpleConferenceMessage"
        QT_MOC_LITERAL(473, 23),  // "testSimpleFriendRequest"
        QT_MOC_LITERAL(497, 26),  // "testSimpleConferenceInvite"
        QT_MOC_LITERAL(524, 23)   // "testSimpleMessageToggle"
    },
    "TestNotificationGenerator",
    "init",
    "",
    "testSingleFriendMessage",
    "testMultipleFriendMessages",
    "testNotificationClear",
    "testConferenceMessage",
    "testMultipleConferenceMessages",
    "testMultipleFriendSourceMessages",
    "testMultipleConferenceSourceMessages",
    "testMixedSourceMessages",
    "testFileTransfer",
    "testFileTransferAfterMessage",
    "testConferenceInvitation",
    "testConferenceInviteUncounted",
    "testFriendRequest",
    "testFriendRequestUncounted",
    "testSimpleFriendMessage",
    "testSimpleFileTransfer",
    "testSimpleConferenceMessage",
    "testSimpleFriendRequest",
    "testSimpleConferenceInvite",
    "testSimpleMessageToggle"
};
#undef QT_MOC_LITERAL
} // unnamed namespace

Q_CONSTINIT static const uint qt_meta_data_TestNotificationGenerator[] = {

 // content:
      10,       // revision
       0,       // classname
       0,    0, // classinfo
      21,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags, initial metatype offsets
       1,    0,  140,    2, 0x08,    1 /* Private */,
       3,    0,  141,    2, 0x08,    2 /* Private */,
       4,    0,  142,    2, 0x08,    3 /* Private */,
       5,    0,  143,    2, 0x08,    4 /* Private */,
       6,    0,  144,    2, 0x08,    5 /* Private */,
       7,    0,  145,    2, 0x08,    6 /* Private */,
       8,    0,  146,    2, 0x08,    7 /* Private */,
       9,    0,  147,    2, 0x08,    8 /* Private */,
      10,    0,  148,    2, 0x08,    9 /* Private */,
      11,    0,  149,    2, 0x08,   10 /* Private */,
      12,    0,  150,    2, 0x08,   11 /* Private */,
      13,    0,  151,    2, 0x08,   12 /* Private */,
      14,    0,  152,    2, 0x08,   13 /* Private */,
      15,    0,  153,    2, 0x08,   14 /* Private */,
      16,    0,  154,    2, 0x08,   15 /* Private */,
      17,    0,  155,    2, 0x08,   16 /* Private */,
      18,    0,  156,    2, 0x08,   17 /* Private */,
      19,    0,  157,    2, 0x08,   18 /* Private */,
      20,    0,  158,    2, 0x08,   19 /* Private */,
      21,    0,  159,    2, 0x08,   20 /* Private */,
      22,    0,  160,    2, 0x08,   21 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

Q_CONSTINIT const QMetaObject TestNotificationGenerator::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_meta_stringdata_TestNotificationGenerator.offsetsAndSizes,
    qt_meta_data_TestNotificationGenerator,
    qt_static_metacall,
    nullptr,
    qt_incomplete_metaTypeArray<qt_meta_stringdata_TestNotificationGenerator_t,
        // Q_OBJECT / Q_GADGET
        QtPrivate::TypeAndForceComplete<TestNotificationGenerator, std::true_type>,
        // method 'init'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testSingleFriendMessage'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testMultipleFriendMessages'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testNotificationClear'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testConferenceMessage'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testMultipleConferenceMessages'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testMultipleFriendSourceMessages'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testMultipleConferenceSourceMessages'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testMixedSourceMessages'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testFileTransfer'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testFileTransferAfterMessage'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testConferenceInvitation'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testConferenceInviteUncounted'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testFriendRequest'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testFriendRequestUncounted'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testSimpleFriendMessage'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testSimpleFileTransfer'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testSimpleConferenceMessage'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testSimpleFriendRequest'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testSimpleConferenceInvite'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testSimpleMessageToggle'
        QtPrivate::TypeAndForceComplete<void, std::false_type>
    >,
    nullptr
} };

void TestNotificationGenerator::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<TestNotificationGenerator *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->init(); break;
        case 1: _t->testSingleFriendMessage(); break;
        case 2: _t->testMultipleFriendMessages(); break;
        case 3: _t->testNotificationClear(); break;
        case 4: _t->testConferenceMessage(); break;
        case 5: _t->testMultipleConferenceMessages(); break;
        case 6: _t->testMultipleFriendSourceMessages(); break;
        case 7: _t->testMultipleConferenceSourceMessages(); break;
        case 8: _t->testMixedSourceMessages(); break;
        case 9: _t->testFileTransfer(); break;
        case 10: _t->testFileTransferAfterMessage(); break;
        case 11: _t->testConferenceInvitation(); break;
        case 12: _t->testConferenceInviteUncounted(); break;
        case 13: _t->testFriendRequest(); break;
        case 14: _t->testFriendRequestUncounted(); break;
        case 15: _t->testSimpleFriendMessage(); break;
        case 16: _t->testSimpleFileTransfer(); break;
        case 17: _t->testSimpleConferenceMessage(); break;
        case 18: _t->testSimpleFriendRequest(); break;
        case 19: _t->testSimpleConferenceInvite(); break;
        case 20: _t->testSimpleMessageToggle(); break;
        default: ;
        }
    }
    (void)_a;
}

const QMetaObject *TestNotificationGenerator::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestNotificationGenerator::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_TestNotificationGenerator.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestNotificationGenerator::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 21)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 21;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 21)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 21;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE

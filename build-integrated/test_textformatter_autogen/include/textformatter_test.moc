/****************************************************************************
** Meta object code from reading C++ file 'textformatter_test.cpp'
**
** Created by: The Qt Meta Object Compiler version 68 (Qt 6.4.2)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <memory>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'textformatter_test.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 68
#error "This file was generated using the moc from 6.4.2. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
namespace {
struct qt_meta_stringdata_TestTextFormatter_t {
    uint offsetsAndSizes[40];
    char stringdata0[18];
    char stringdata1[27];
    char stringdata2[1];
    char stringdata3[27];
    char stringdata4[31];
    char stringdata5[31];
    char stringdata6[31];
    char stringdata7[31];
    char stringdata8[30];
    char stringdata9[30];
    char stringdata10[28];
    char stringdata11[28];
    char stringdata12[32];
    char stringdata13[32];
    char stringdata14[45];
    char stringdata15[45];
    char stringdata16[28];
    char stringdata17[17];
    char stringdata18[18];
    char stringdata19[8];
};
#define QT_MOC_LITERAL(ofs, len) \
    uint(sizeof(qt_meta_stringdata_TestTextFormatter_t::offsetsAndSizes) + ofs), len 
Q_CONSTINIT static const qt_meta_stringdata_TestTextFormatter_t qt_meta_stringdata_TestTextFormatter = {
    {
        QT_MOC_LITERAL(0, 17),  // "TestTextFormatter"
        QT_MOC_LITERAL(18, 26),  // "commonWorkCasesShowSymbols"
        QT_MOC_LITERAL(45, 0),  // ""
        QT_MOC_LITERAL(46, 26),  // "commonWorkCasesHideSymbols"
        QT_MOC_LITERAL(73, 30),  // "singleSignWorkCasesShowSymbols"
        QT_MOC_LITERAL(104, 30),  // "singleSignWorkCasesHideSymbols"
        QT_MOC_LITERAL(135, 30),  // "doubleSignWorkCasesShowSymbols"
        QT_MOC_LITERAL(166, 30),  // "doubleSignWorkCasesHideSymbols"
        QT_MOC_LITERAL(197, 29),  // "multiSignWorkCasesHideSymbols"
        QT_MOC_LITERAL(227, 29),  // "multiSignWorkCasesShowSymbols"
        QT_MOC_LITERAL(257, 27),  // "commonExceptionsShowSymbols"
        QT_MOC_LITERAL(285, 27),  // "commonExceptionsHideSymbols"
        QT_MOC_LITERAL(313, 31),  // "singleSignExceptionsShowSymbols"
        QT_MOC_LITERAL(345, 31),  // "singleSignExceptionsHideSymbols"
        QT_MOC_LITERAL(377, 44),  // "singleAndDoubleMarkdownExcept..."
        QT_MOC_LITERAL(422, 44),  // "singleAndDoubleMarkdownExcept..."
        QT_MOC_LITERAL(467, 27),  // "mixedFormattingSpecialCases"
        QT_MOC_LITERAL(495, 16),  // "postNullTagsHtml"
        QT_MOC_LITERAL(512, 17),  // "postNullTagsPlain"
        QT_MOC_LITERAL(530, 7)   // "urlTest"
    },
    "TestTextFormatter",
    "commonWorkCasesShowSymbols",
    "",
    "commonWorkCasesHideSymbols",
    "singleSignWorkCasesShowSymbols",
    "singleSignWorkCasesHideSymbols",
    "doubleSignWorkCasesShowSymbols",
    "doubleSignWorkCasesHideSymbols",
    "multiSignWorkCasesHideSymbols",
    "multiSignWorkCasesShowSymbols",
    "commonExceptionsShowSymbols",
    "commonExceptionsHideSymbols",
    "singleSignExceptionsShowSymbols",
    "singleSignExceptionsHideSymbols",
    "singleAndDoubleMarkdownExceptionsShowSymbols",
    "singleAndDoubleMarkdownExceptionsHideSymbols",
    "mixedFormattingSpecialCases",
    "postNullTagsHtml",
    "postNullTagsPlain",
    "urlTest"
};
#undef QT_MOC_LITERAL
} // unnamed namespace

Q_CONSTINIT static const uint qt_meta_data_TestTextFormatter[] = {

 // content:
      10,       // revision
       0,       // classname
       0,    0, // classinfo
      18,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags, initial metatype offsets
       1,    0,  122,    2, 0x08,    1 /* Private */,
       3,    0,  123,    2, 0x08,    2 /* Private */,
       4,    0,  124,    2, 0x08,    3 /* Private */,
       5,    0,  125,    2, 0x08,    4 /* Private */,
       6,    0,  126,    2, 0x08,    5 /* Private */,
       7,    0,  127,    2, 0x08,    6 /* Private */,
       8,    0,  128,    2, 0x08,    7 /* Private */,
       9,    0,  129,    2, 0x08,    8 /* Private */,
      10,    0,  130,    2, 0x08,    9 /* Private */,
      11,    0,  131,    2, 0x08,   10 /* Private */,
      12,    0,  132,    2, 0x08,   11 /* Private */,
      13,    0,  133,    2, 0x08,   12 /* Private */,
      14,    0,  134,    2, 0x08,   13 /* Private */,
      15,    0,  135,    2, 0x08,   14 /* Private */,
      16,    0,  136,    2, 0x08,   15 /* Private */,
      17,    0,  137,    2, 0x08,   16 /* Private */,
      18,    0,  138,    2, 0x08,   17 /* Private */,
      19,    0,  139,    2, 0x08,   18 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

Q_CONSTINIT const QMetaObject TestTextFormatter::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_meta_stringdata_TestTextFormatter.offsetsAndSizes,
    qt_meta_data_TestTextFormatter,
    qt_static_metacall,
    nullptr,
    qt_incomplete_metaTypeArray<qt_meta_stringdata_TestTextFormatter_t,
        // Q_OBJECT / Q_GADGET
        QtPrivate::TypeAndForceComplete<TestTextFormatter, std::true_type>,
        // method 'commonWorkCasesShowSymbols'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'commonWorkCasesHideSymbols'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'singleSignWorkCasesShowSymbols'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'singleSignWorkCasesHideSymbols'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'doubleSignWorkCasesShowSymbols'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'doubleSignWorkCasesHideSymbols'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'multiSignWorkCasesHideSymbols'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'multiSignWorkCasesShowSymbols'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'commonExceptionsShowSymbols'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'commonExceptionsHideSymbols'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'singleSignExceptionsShowSymbols'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'singleSignExceptionsHideSymbols'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'singleAndDoubleMarkdownExceptionsShowSymbols'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'singleAndDoubleMarkdownExceptionsHideSymbols'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'mixedFormattingSpecialCases'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'postNullTagsHtml'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'postNullTagsPlain'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'urlTest'
        QtPrivate::TypeAndForceComplete<void, std::false_type>
    >,
    nullptr
} };

void TestTextFormatter::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<TestTextFormatter *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->commonWorkCasesShowSymbols(); break;
        case 1: _t->commonWorkCasesHideSymbols(); break;
        case 2: _t->singleSignWorkCasesShowSymbols(); break;
        case 3: _t->singleSignWorkCasesHideSymbols(); break;
        case 4: _t->doubleSignWorkCasesShowSymbols(); break;
        case 5: _t->doubleSignWorkCasesHideSymbols(); break;
        case 6: _t->multiSignWorkCasesHideSymbols(); break;
        case 7: _t->multiSignWorkCasesShowSymbols(); break;
        case 8: _t->commonExceptionsShowSymbols(); break;
        case 9: _t->commonExceptionsHideSymbols(); break;
        case 10: _t->singleSignExceptionsShowSymbols(); break;
        case 11: _t->singleSignExceptionsHideSymbols(); break;
        case 12: _t->singleAndDoubleMarkdownExceptionsShowSymbols(); break;
        case 13: _t->singleAndDoubleMarkdownExceptionsHideSymbols(); break;
        case 14: _t->mixedFormattingSpecialCases(); break;
        case 15: _t->postNullTagsHtml(); break;
        case 16: _t->postNullTagsPlain(); break;
        case 17: _t->urlTest(); break;
        default: ;
        }
    }
    (void)_a;
}

const QMetaObject *TestTextFormatter::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestTextFormatter::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_TestTextFormatter.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestTextFormatter::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 18)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 18;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 18)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 18;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE

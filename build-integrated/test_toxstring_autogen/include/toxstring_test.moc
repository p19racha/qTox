/****************************************************************************
** Meta object code from reading C++ file 'toxstring_test.cpp'
**
** Created by: The Qt Meta Object Compiler version 68 (Qt 6.4.2)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <memory>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'toxstring_test.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 68
#error "This file was generated using the moc from 6.4.2. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
namespace {
struct qt_meta_stringdata_TestToxString_t {
    uint offsetsAndSizes[34];
    char stringdata0[14];
    char stringdata1[12];
    char stringdata2[1];
    char stringdata3[15];
    char stringdata4[12];
    char stringdata5[14];
    char stringdata6[15];
    char stringdata7[15];
    char stringdata8[17];
    char stringdata9[12];
    char stringdata10[11];
    char stringdata11[10];
    char stringdata12[19];
    char stringdata13[17];
    char stringdata14[23];
    char stringdata15[14];
    char stringdata16[8];
};
#define QT_MOC_LITERAL(ofs, len) \
    uint(sizeof(qt_meta_stringdata_TestToxString_t::offsetsAndSizes) + ofs), len 
Q_CONSTINIT static const qt_meta_stringdata_TestToxString_t qt_meta_stringdata_TestToxString = {
    {
        QT_MOC_LITERAL(0, 13),  // "TestToxString"
        QT_MOC_LITERAL(14, 11),  // "QStringTest"
        QT_MOC_LITERAL(26, 0),  // ""
        QT_MOC_LITERAL(27, 14),  // "QByteArrayTest"
        QT_MOC_LITERAL(42, 11),  // "uint8_tTest"
        QT_MOC_LITERAL(54, 13),  // "emptyQStrTest"
        QT_MOC_LITERAL(68, 14),  // "emptyQByteTest"
        QT_MOC_LITERAL(83, 14),  // "emptyUINT8Test"
        QT_MOC_LITERAL(98, 16),  // "nullptrUINT8Test"
        QT_MOC_LITERAL(115, 11),  // "localesTest"
        QT_MOC_LITERAL(127, 10),  // "filterTest"
        QT_MOC_LITERAL(138, 9),  // "emojiTest"
        QT_MOC_LITERAL(148, 18),  // "handshakeEmojiTest"
        QT_MOC_LITERAL(167, 16),  // "coloredEmojiTest"
        QT_MOC_LITERAL(184, 22),  // "combiningCharacterTest"
        QT_MOC_LITERAL(207, 13),  // "multiLineTest"
        QT_MOC_LITERAL(221, 7)   // "tabTest"
    },
    "TestToxString",
    "QStringTest",
    "",
    "QByteArrayTest",
    "uint8_tTest",
    "emptyQStrTest",
    "emptyQByteTest",
    "emptyUINT8Test",
    "nullptrUINT8Test",
    "localesTest",
    "filterTest",
    "emojiTest",
    "handshakeEmojiTest",
    "coloredEmojiTest",
    "combiningCharacterTest",
    "multiLineTest",
    "tabTest"
};
#undef QT_MOC_LITERAL
} // unnamed namespace

Q_CONSTINIT static const uint qt_meta_data_TestToxString[] = {

 // content:
      10,       // revision
       0,       // classname
       0,    0, // classinfo
      15,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags, initial metatype offsets
       1,    0,  104,    2, 0x08,    1 /* Private */,
       3,    0,  105,    2, 0x08,    2 /* Private */,
       4,    0,  106,    2, 0x08,    3 /* Private */,
       5,    0,  107,    2, 0x08,    4 /* Private */,
       6,    0,  108,    2, 0x08,    5 /* Private */,
       7,    0,  109,    2, 0x08,    6 /* Private */,
       8,    0,  110,    2, 0x08,    7 /* Private */,
       9,    0,  111,    2, 0x08,    8 /* Private */,
      10,    0,  112,    2, 0x08,    9 /* Private */,
      11,    0,  113,    2, 0x08,   10 /* Private */,
      12,    0,  114,    2, 0x08,   11 /* Private */,
      13,    0,  115,    2, 0x08,   12 /* Private */,
      14,    0,  116,    2, 0x08,   13 /* Private */,
      15,    0,  117,    2, 0x08,   14 /* Private */,
      16,    0,  118,    2, 0x08,   15 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

Q_CONSTINIT const QMetaObject TestToxString::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_meta_stringdata_TestToxString.offsetsAndSizes,
    qt_meta_data_TestToxString,
    qt_static_metacall,
    nullptr,
    qt_incomplete_metaTypeArray<qt_meta_stringdata_TestToxString_t,
        // Q_OBJECT / Q_GADGET
        QtPrivate::TypeAndForceComplete<TestToxString, std::true_type>,
        // method 'QStringTest'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'QByteArrayTest'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'uint8_tTest'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'emptyQStrTest'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'emptyQByteTest'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'emptyUINT8Test'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'nullptrUINT8Test'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'localesTest'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'filterTest'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'emojiTest'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'handshakeEmojiTest'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'coloredEmojiTest'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'combiningCharacterTest'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'multiLineTest'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'tabTest'
        QtPrivate::TypeAndForceComplete<void, std::false_type>
    >,
    nullptr
} };

void TestToxString::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<TestToxString *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->QStringTest(); break;
        case 1: _t->QByteArrayTest(); break;
        case 2: _t->uint8_tTest(); break;
        case 3: _t->emptyQStrTest(); break;
        case 4: _t->emptyQByteTest(); break;
        case 5: _t->emptyUINT8Test(); break;
        case 6: _t->nullptrUINT8Test(); break;
        case 7: _t->localesTest(); break;
        case 8: _t->filterTest(); break;
        case 9: _t->emojiTest(); break;
        case 10: _t->handshakeEmojiTest(); break;
        case 11: _t->coloredEmojiTest(); break;
        case 12: _t->combiningCharacterTest(); break;
        case 13: _t->multiLineTest(); break;
        case 14: _t->tabTest(); break;
        default: ;
        }
    }
    (void)_a;
}

const QMetaObject *TestToxString::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestToxString::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_TestToxString.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestToxString::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 15)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 15;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 15)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 15;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
